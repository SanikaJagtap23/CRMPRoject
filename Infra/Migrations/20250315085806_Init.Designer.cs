// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(CRMContext))]
    [Migration("20250315085806_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domine.Accounting", b =>
                {
                    b.Property<long>("AccountYearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountYearID"));

                    b.Property<string>("AccountYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.HasKey("AccountYearID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("AccountingTbl");
                });

            modelBuilder.Entity("Domine.BillingCompany", b =>
                {
                    b.Property<long>("BillingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BillingCompanyID"));

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillingCompanyID");

                    b.HasIndex("CityID");

                    b.ToTable("BillingCompanyTbl");
                });

            modelBuilder.Entity("Domine.Brand", b =>
                {
                    b.Property<long>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BrandID"));

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActiveFlag")
                        .HasColumnType("bit");

                    b.HasKey("BrandID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("BrandTbl");
                });

            modelBuilder.Entity("Domine.City", b =>
                {
                    b.Property<long>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityID"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateID")
                        .HasColumnType("bigint");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("CityTbl");
                });

            modelBuilder.Entity("Domine.CompanyUser", b =>
                {
                    b.Property<long>("CompanyUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyUserID"));

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyUserID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("CompanyUserTbl");
                });

            modelBuilder.Entity("Domine.Country", b =>
                {
                    b.Property<long>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryID"));

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("CountryTbl");
                });

            modelBuilder.Entity("Domine.CustomerCategory", b =>
                {
                    b.Property<long>("CustomerCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerCategoryID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCategoryID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("CustomerCategoryTbl");
                });

            modelBuilder.Entity("Domine.CustomerORParty", b =>
                {
                    b.Property<long>("CustomerORPartyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerORPartyID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerCategoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerORPartyID");

                    b.HasIndex("CityID");

                    b.HasIndex("CustomerCategoryID");

                    b.ToTable("CustomerORPartyTbl");
                });

            modelBuilder.Entity("Domine.Discount", b =>
                {
                    b.Property<long>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DiscountID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPercentile")
                        .HasColumnType("bit");

                    b.HasKey("DiscountID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("DiscountTbl");
                });

            modelBuilder.Entity("Domine.ExpenseType", b =>
                {
                    b.Property<long>("ExpenseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExpenseTypeID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpenseTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseTypeID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("ExpenseTbl");
                });

            modelBuilder.Entity("Domine.InVoiceTermAndConditions", b =>
                {
                    b.Property<long>("InVoiceTermAndConditionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InVoiceTermAndConditionsID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("InVoiceTermAndConditionsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InVoiceTermAndConditionsID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("InVoiceTermAndConditionsTbl");
                });

            modelBuilder.Entity("Domine.Item", b =>
                {
                    b.Property<long>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("IsProductOrService")
                        .HasColumnType("int");

                    b.Property<long>("ItemCategoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnitID")
                        .HasColumnType("bigint");

                    b.HasKey("ItemID");

                    b.HasIndex("ItemCategoryID");

                    b.HasIndex("UnitID");

                    b.ToTable("ItemTbl");
                });

            modelBuilder.Entity("Domine.ItemCategory", b =>
                {
                    b.Property<long>("ItemCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemCategoryID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemCategoryID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("ItemCategoryTbl");
                });

            modelBuilder.Entity("Domine.POTermsAndConditions", b =>
                {
                    b.Property<long>("POTermsAndConditionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("POTermsAndConditionsID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("POTermsAndConditionsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("POTermsAndConditionsID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("POTermsAndConditionsTbl");
                });

            modelBuilder.Entity("Domine.PaymentMode", b =>
                {
                    b.Property<long>("PaymentModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentModeID"));

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActiveFlag")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentModeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentModeID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("PaymentModeTbl");
                });

            modelBuilder.Entity("Domine.PurchaseInvoiceTerms", b =>
                {
                    b.Property<long>("PurchaseInvoiceTermsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseInvoiceTermsID"));

                    b.Property<long>("SalesInvoiceID")
                        .HasColumnType("bigint");

                    b.Property<string>("TermAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseInvoiceTermsID");

                    b.HasIndex("SalesInvoiceID");

                    b.ToTable("PurchaseInvoiceTermsTbl");
                });

            modelBuilder.Entity("Domine.PurchaseOrder", b =>
                {
                    b.Property<long>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseOrderID"));

                    b.Property<bool>("ActiveFlage")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<long>("SupplierORVenderID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("BillingCompanyID");

                    b.HasIndex("SupplierORVenderID");

                    b.ToTable("PurchaseOrderTbl");
                });

            modelBuilder.Entity("Domine.PurchaseOrderDet", b =>
                {
                    b.Property<long>("PurchaseOrderDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseOrderDetID"));

                    b.Property<long>("ItemID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PurchaseOrderID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UnitID")
                        .HasColumnType("bigint");

                    b.HasKey("PurchaseOrderDetID");

                    b.HasIndex("ItemID");

                    b.HasIndex("PurchaseOrderID");

                    b.HasIndex("UnitID");

                    b.ToTable("PurchaseOrderDetTbl");
                });

            modelBuilder.Entity("Domine.PurchaseOrderTerms", b =>
                {
                    b.Property<long>("PurchaseOrderTermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseOrderTermID"));

                    b.Property<long>("POTermsAndConditionID")
                        .HasColumnType("bigint");

                    b.Property<long>("PurchaseOrderID")
                        .HasColumnType("bigint");

                    b.HasKey("PurchaseOrderTermID");

                    b.HasIndex("POTermsAndConditionID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseOrderTermsTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoice", b =>
                {
                    b.Property<long>("SalesInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoiceID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerOrPartyID")
                        .HasColumnType("bigint");

                    b.Property<string>("InVoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InVoicePaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalesInVoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SalesOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesInvoiceID");

                    b.HasIndex("BillingCompanyID");

                    b.HasIndex("CustomerOrPartyID");

                    b.ToTable("SalesInvoiceTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoiceDet", b =>
                {
                    b.Property<long>("SalesInvoiceDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoiceDetID"));

                    b.Property<bool>("IsFreeOrSample")
                        .HasColumnType("bit");

                    b.Property<long>("ItemID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SalesInvoiceID")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitID")
                        .HasColumnType("bigint");

                    b.HasKey("SalesInvoiceDetID");

                    b.HasIndex("ItemID");

                    b.HasIndex("SalesInvoiceID");

                    b.HasIndex("UnitID");

                    b.ToTable("SalesInvoiceDetTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoiceDiscount", b =>
                {
                    b.Property<long>("SalesInvoiceDiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoiceDiscountID"));

                    b.Property<decimal>("DisCountAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountApplied")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("DiscountID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPercentile")
                        .HasColumnType("bit");

                    b.Property<long>("SalesInvoiceID")
                        .HasColumnType("bigint");

                    b.HasKey("SalesInvoiceDiscountID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("SalesInvoiceID");

                    b.ToTable("SalesInvoiceDiscountTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoicePayment", b =>
                {
                    b.Property<long>("SalesInvoicePaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoicePaymentID"));

                    b.Property<decimal>("PaymentAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentModeID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesInvoiceID")
                        .HasColumnType("bigint");

                    b.Property<long>("SalesVoiceID")
                        .HasColumnType("bigint");

                    b.HasKey("SalesInvoicePaymentID");

                    b.HasIndex("PaymentModeID");

                    b.HasIndex("SalesInvoiceID");

                    b.ToTable("SalesInvoicePaymentTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoicePaymentCheque", b =>
                {
                    b.Property<long>("SalesInvoicePaymentChequeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoicePaymentChequeID"));

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GetSalesInvoicePaymentSalesInvoicePaymentID")
                        .HasColumnType("bigint");

                    b.Property<long>("SalesPaymentInVoiceID")
                        .HasColumnType("bigint");

                    b.HasKey("SalesInvoicePaymentChequeID");

                    b.HasIndex("GetSalesInvoicePaymentSalesInvoicePaymentID");

                    b.ToTable("SalesInvoicePaymentChequeTbl");
                });

            modelBuilder.Entity("Domine.SalesInvoiceTermsAndCondition", b =>
                {
                    b.Property<long>("SalesInvoiceTermsAndConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesInvoiceTermsAndConditionID"));

                    b.Property<string>("ActiveFlag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesInvoiceTermsAndConditionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesInvoiceTermsAndConditionID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("SalesInvoiceTermsAndConditionTbl");
                });

            modelBuilder.Entity("Domine.State", b =>
                {
                    b.Property<long>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateID"));

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("StateTbl");
                });

            modelBuilder.Entity("Domine.SupplierORVender", b =>
                {
                    b.Property<long>("SupplierORVenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SupplierORVenderID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningBalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierORVenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierORVenderID");

                    b.HasIndex("CityID");

                    b.ToTable("SupplierORVenderTbl");
                });

            modelBuilder.Entity("Domine.Unit", b =>
                {
                    b.Property<long>("UnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UnitID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<long>("BillingCompanyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMasterUnitID")
                        .HasColumnType("bit");

                    b.Property<long?>("MasterUnitID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QtyPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitID");

                    b.HasIndex("BillingCompanyID");

                    b.ToTable("UnitTbl");
                });

            modelBuilder.Entity("Domine.Accounting", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("Accountings")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.BillingCompany", b =>
                {
                    b.HasOne("Domine.City", "City")
                        .WithMany("BillingCompanies")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domine.Brand", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("Brands")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.City", b =>
                {
                    b.HasOne("Domine.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domine.CompanyUser", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.CustomerCategory", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("CustomerCategories")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.CustomerORParty", b =>
                {
                    b.HasOne("Domine.City", "City")
                        .WithMany("CustomerORParties")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.CustomerCategory", "CustomerCategory")
                        .WithMany("CustomerORParties")
                        .HasForeignKey("CustomerCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CustomerCategory");
                });

            modelBuilder.Entity("Domine.Discount", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("Discounts")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.ExpenseType", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("ExpenseTypes")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.InVoiceTermAndConditions", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("InVoiceTermAndConditions")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.Item", b =>
                {
                    b.HasOne("Domine.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.Unit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domine.ItemCategory", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("ItemCategories")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.POTermsAndConditions", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("POTermsAndConditions")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.PaymentMode", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("GetPaymentModes")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.PurchaseInvoiceTerms", b =>
                {
                    b.HasOne("Domine.SalesInvoice", "SalesInvoice")
                        .WithMany("PurchaseInvoiceTerms")
                        .HasForeignKey("SalesInvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("Domine.PurchaseOrder", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.SupplierORVender", "SupplierORVenders")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierORVenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");

                    b.Navigation("SupplierORVenders");
                });

            modelBuilder.Entity("Domine.PurchaseOrderDet", b =>
                {
                    b.HasOne("Domine.Item", "Item")
                        .WithMany("PurchaseOrderDets")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDets")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.Unit", "Unit")
                        .WithMany("PurchaseOrderDets")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domine.PurchaseOrderTerms", b =>
                {
                    b.HasOne("Domine.POTermsAndConditions", "POTermsAndConditions")
                        .WithMany("PurchaseOrderTerms")
                        .HasForeignKey("POTermsAndConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderTerms")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("POTermsAndConditions");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Domine.SalesInvoice", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.CustomerORParty", "CustomerORParty")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerOrPartyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");

                    b.Navigation("CustomerORParty");
                });

            modelBuilder.Entity("Domine.SalesInvoiceDet", b =>
                {
                    b.HasOne("Domine.Item", "Item")
                        .WithMany("SalesInvoiceDets")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceDets")
                        .HasForeignKey("SalesInvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.Unit", "Unit")
                        .WithMany("SalesInvoiceDets")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SalesInvoice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domine.SalesInvoiceDiscount", b =>
                {
                    b.HasOne("Domine.Discount", "Discount")
                        .WithMany("SalesInvoiceDiscounts")
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceDiscounts")
                        .HasForeignKey("SalesInvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("Domine.SalesInvoicePayment", b =>
                {
                    b.HasOne("Domine.PaymentMode", "PaymentMode")
                        .WithMany("SalesInvoicePayments")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domine.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoicePayments")
                        .HasForeignKey("SalesInvoiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PaymentMode");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("Domine.SalesInvoicePaymentCheque", b =>
                {
                    b.HasOne("Domine.SalesInvoicePayment", "GetSalesInvoicePayment")
                        .WithMany("SalesInvoicePaymentCheque")
                        .HasForeignKey("GetSalesInvoicePaymentSalesInvoicePaymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GetSalesInvoicePayment");
                });

            modelBuilder.Entity("Domine.SalesInvoiceTermsAndCondition", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("GetSalesInvoiceTermsAndConditions")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.State", b =>
                {
                    b.HasOne("Domine.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domine.SupplierORVender", b =>
                {
                    b.HasOne("Domine.City", "City")
                        .WithMany("SupplierORVenders")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domine.Unit", b =>
                {
                    b.HasOne("Domine.BillingCompany", "BillingCompany")
                        .WithMany("Units")
                        .HasForeignKey("BillingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingCompany");
                });

            modelBuilder.Entity("Domine.BillingCompany", b =>
                {
                    b.Navigation("Accountings");

                    b.Navigation("Brands");

                    b.Navigation("CompanyUsers");

                    b.Navigation("CustomerCategories");

                    b.Navigation("Discounts");

                    b.Navigation("ExpenseTypes");

                    b.Navigation("GetPaymentModes");

                    b.Navigation("GetSalesInvoiceTermsAndConditions");

                    b.Navigation("InVoiceTermAndConditions");

                    b.Navigation("ItemCategories");

                    b.Navigation("POTermsAndConditions");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SalesInvoices");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Domine.City", b =>
                {
                    b.Navigation("BillingCompanies");

                    b.Navigation("CustomerORParties");

                    b.Navigation("SupplierORVenders");
                });

            modelBuilder.Entity("Domine.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Domine.CustomerCategory", b =>
                {
                    b.Navigation("CustomerORParties");
                });

            modelBuilder.Entity("Domine.CustomerORParty", b =>
                {
                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("Domine.Discount", b =>
                {
                    b.Navigation("SalesInvoiceDiscounts");
                });

            modelBuilder.Entity("Domine.Item", b =>
                {
                    b.Navigation("PurchaseOrderDets");

                    b.Navigation("SalesInvoiceDets");
                });

            modelBuilder.Entity("Domine.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domine.POTermsAndConditions", b =>
                {
                    b.Navigation("PurchaseOrderTerms");
                });

            modelBuilder.Entity("Domine.PaymentMode", b =>
                {
                    b.Navigation("SalesInvoicePayments");
                });

            modelBuilder.Entity("Domine.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDets");

                    b.Navigation("PurchaseOrderTerms");
                });

            modelBuilder.Entity("Domine.SalesInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceTerms");

                    b.Navigation("SalesInvoiceDets");

                    b.Navigation("SalesInvoiceDiscounts");

                    b.Navigation("SalesInvoicePayments");
                });

            modelBuilder.Entity("Domine.SalesInvoicePayment", b =>
                {
                    b.Navigation("SalesInvoicePaymentCheque");
                });

            modelBuilder.Entity("Domine.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domine.SupplierORVender", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("Domine.Unit", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PurchaseOrderDets");

                    b.Navigation("SalesInvoiceDets");
                });
#pragma warning restore 612, 618
        }
    }
}
